{"version":3,"sources":["index.js"],"names":["boardSize","Square","props","className","onClick","value","calculateWinner","squares","winLines","i","j","newWinLines","map","line","item","k","length","a","b","c","d","e","Board","key","this","n","board","boardRow","push","renderSquare","React","Component","Game","state","history","Array","fill","x","y","stepNumber","blackIsNext","slice","setState","concat","parseInt","step","status","current","winner","moves","move","desc","jumpTo","handleClick","ReactDOM","render","document","getElementById"],"mappings":"0MAIMA,G,MAAY,IAElB,SAASC,EAAOC,GACd,OACE,4BAAQC,UAAU,SAASC,QAASF,EAAME,SACvCF,EAAMG,OAKb,SAASC,EAAgBC,GAgBvB,IAfA,IAAMC,EAAW,CACf,CAAC,EAAG,GAAI,GAAI,GAAI,IAChB,CAAC,EAAG,GAAI,GAAI,GAAI,IAChB,CAAC,EAAG,GAAI,GAAI,GAAI,IAChB,CAAC,EAAG,GAAI,GAAI,GAAI,IAChB,CAAC,EAAG,GAAI,GAAI,GAAI,IAChB,CAAC,EAAG,EAAG,EAAG,EAAG,GACb,CAAC,GAAI,GAAI,GAAI,GAAI,IACjB,CAAC,GAAI,GAAI,GAAI,GAAI,IACjB,CAAC,GAAI,GAAI,GAAI,GAAI,IACjB,CAAC,GAAI,GAAI,GAAI,GAAI,IACjB,CAAC,EAAG,GAAI,GAAI,GAAI,IAChB,CAAC,EAAG,GAAI,GAAI,GAAI,KAbc,WAgBvBC,GACP,IAjB8B,eAiBrBC,GAKP,IAJA,IAAMC,EAAcH,EAASI,IAAI,SAAAC,GAE/B,OADmBA,EAAKD,IAAI,SAAAE,GAAI,OAAIA,EAAQL,EAAIT,EAAaU,MAGtDK,EAAI,EAAGA,EAAIJ,EAAYK,OAAQD,IAAK,CAAC,IAAD,cACnBJ,EAAYI,GADO,GACpCE,EADoC,KACjCC,EADiC,KAC9BC,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAE3C,GACEd,EAAQU,IACRV,EAAQU,KAAOV,EAAQW,IACvBX,EAAQU,KAAOV,EAAQY,IACvBZ,EAAQU,KAAOV,EAAQa,IACvBb,EAAQU,KAAOV,EAAQc,GAEvB,MAAM,CAAN,KAAOd,EAAQU,OAdZP,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAAC,IAAD,IAApBA,GAAoB,oCADtBD,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAAC,IAAD,IAApBA,GAAoB,kCAoB7B,OAAO,K,IAGHa,E,qLACSb,GAAI,IAAD,OACd,OAAO,kBAACR,EAAD,CAAQsB,IAAKd,EAAGJ,MAAOmB,KAAKtB,MAAMK,QAAQE,GAAIL,QAAS,kBAAM,EAAKF,MAAME,QAAQK,Q,+BAMvF,IAFA,IAAIgB,EAAI,EACJC,EAAQ,GACHjB,EAAI,EAAGA,EAAIT,EAAWS,IAAK,CAElC,IADA,IAAIkB,EAAW,GACNjB,EAAI,EAAGA,EAAIV,EAAWU,IAAKe,IAClCE,EAASC,KAAKJ,KAAKK,aAAaJ,IAElCC,EAAME,KAAK,yBAAKzB,UAAU,YAAYoB,IAAKd,GAAIkB,IAEjD,OAAO,6BAAMD,O,GAfGI,IAAMC,WAmBpBC,E,YACJ,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,QAAS,CAAC,CACR3B,QAAS4B,MAAMnC,EAAYA,GAAWoC,KAAK,MAC3CC,EAAG,KACHC,EAAG,OAELC,WAAY,EACZC,aAAa,GATH,E,yEAaF/B,GACV,IAAMyB,EAAUV,KAAKS,MAAMC,QAAQO,MAAM,EAAGjB,KAAKS,MAAMM,WAAa,GAE9DhC,EADU2B,EAAQA,EAAQlB,OAAS,GACjBT,QAAQkC,QAC5BnC,EAAgBC,IAAYA,EAAQE,KAGxCF,EAAQE,GAAKe,KAAKS,MAAMO,YAAc,SAAM,SAC5ChB,KAAKkB,SAAS,CACZR,QAASA,EAAQS,OAAO,CAAC,CACvBpC,QAASA,EACT8B,EAAG5B,EAAIT,EACPsC,EAAGM,SAASnC,EAAIT,MAElBuC,WAAYL,EAAQlB,OACpBwB,aAAchB,KAAKS,MAAMO,iB,6BAItBK,GACLrB,KAAKkB,SAAS,CACZH,WAAYM,EACZL,cAAcK,EAAO,O,+BAIf,IAgBJC,EAhBG,OACDZ,EAAUV,KAAKS,MAAMC,QACrBa,EAAUb,EAAQV,KAAKS,MAAMM,YAC7BS,EAAS1C,EAAgByC,EAAQxC,SACjC0C,EAAQf,EAAQtB,IAAI,SAACiC,EAAMK,GAC/B,IAAMC,EAAOD,EACX,eAAiBA,EAAO,KAAOL,EAAKR,EAAI,IAAMQ,EAAKP,EAAI,IACvD,mBACF,OACE,wBAAIf,IAAK2B,GACP,4BAAQ9C,QAAS,kBAAM,EAAKgD,OAAOF,KAAQC,MAYjD,OAJEL,EADEE,EACO,WAAaA,EAEb,yBAAsBxB,KAAKS,MAAMO,YAAc,eAAO,gBAG/D,yBAAKrC,UAAU,QACb,yBAAKA,UAAU,cACb,kBAACmB,EAAD,CAAOf,QAASwC,EAAQxC,QAASH,QAAS,SAACK,GAAD,OAAO,EAAK4C,YAAY5C,OAEpE,yBAAKN,UAAU,aACb,6BAAM2C,GACN,4BAAKG,S,GArEInB,IAAMC,WA8EzBuB,IAASC,OACP,kBAACvB,EAAD,MACAwB,SAASC,eAAe,U","file":"static/js/main.8b67e0e6.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst boardSize = 19;\n\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nfunction calculateWinner(squares) {\n  const winLines = [\n    [0, 19, 38, 57, 76],\n    [1, 20, 39, 58, 77],\n    [2, 21, 40, 59, 78],\n    [3, 22, 41, 60, 79],\n    [4, 23, 42, 61, 80],\n    [0, 1, 2, 3, 4],\n    [19, 20, 21, 22, 23],\n    [38, 39, 40, 41, 42],\n    [57, 58, 59, 60, 61],\n    [76, 77, 78, 79, 80],\n    [0, 20, 40, 60, 80],\n    [4, 22, 40, 58, 76],\n  ]\n\n  for (let i = 0; i < 14; i++) {\n    for (let j = 0; j < 14; j++) {\n      const newWinLines = winLines.map(line => {\n        const newWinLine = line.map(item => item + (i * boardSize) + j)\n        return newWinLine;\n      })\n      for (let k = 0; k < newWinLines.length; k++) {\n        const [a, b, c, d, e] = newWinLines[k]\n        if (\n          squares[a] &&\n          squares[a] === squares[b] &&\n          squares[a] === squares[c] &&\n          squares[a] === squares[d] &&\n          squares[a] === squares[e]\n        ) {\n          return squares[a];\n        }\n      }\n    }\n  }\n  return null;\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return <Square key={i} value={this.props.squares[i]} onClick={() => this.props.onClick(i)}/>;\n  }\n\n  render() {\n    let n = 0;\n    let board = [];\n    for (let i = 0; i < boardSize; i++) {\n      let boardRow = [];\n      for (let j = 0; j < boardSize; j++, n++) {\n        boardRow.push(this.renderSquare(n))\n      }\n      board.push(<div className=\"board-row\" key={i}>{boardRow}</div>);\n    }\n    return <div>{board}</div>\n  }\n}\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      history: [{\n        squares: Array(boardSize * boardSize).fill(null),\n        x: null,\n        y: null,\n      }],\n      stepNumber: 0,\n      blackIsNext: true,\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.blackIsNext ? '☻' : '○';\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        x: i % boardSize,\n        y: parseInt(i / boardSize)\n      }]),\n      stepNumber: history.length,\n      blackIsNext: !this.state.blackIsNext,\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      blackIsNext: (step % 2) ? false : true\n    })\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n    const moves = history.map((step, move) => {\n      const desc = move ?\n        'Go to move #' + move + ' (' + step.x + ',' + step.y + ')' :\n        'Go to game start';\n      return (\n        <li key={move}>\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      );\n    });\n\n\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player is： ' + (this.state.blackIsNext ? '黑子' : '白子')\n    }\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board squares={current.squares} onClick={(i) => this.handleClick(i)}/>\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}